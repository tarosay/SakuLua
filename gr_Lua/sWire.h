//************************************************************************
// I2C関連
//************************************************************************

//**************************************************
// I2C送信開始準備: Wire.beginT
//  Wire.beginT(address)
//	address: ターゲットデバイスのアドレス
//    0〜0x7Fまでの純粋なアドレスを与えること
//**************************************************
int WireBeginTran( lua_State *LuaLinkP );

//**************************************************
// 送信する1byteのセット: Wire.writeB
//  Wire.writeB(byte)
//	byte: 送信したいデータ
//
//  戻り値
//		成功: 1
//		失敗: 0
//**************************************************
int WireWriteByte( lua_State *LuaLinkP );

//**************************************************
// 送信するデータのセット: Wire.writeI
//  Wire.writeI(int)
//	int: 送信したいデータ
//
//  戻り値
//		成功: 送信したバイト数
//		失敗: 0
//**************************************************
int WireWriteInt( lua_State *LuaLinkP );

//**************************************************
// 送信する文字列のセット: Wire.writeT
//  Wire.writeT(text)
//	text: 文字列
//
//  戻り値
//		成功: 送信したバイト数
//		失敗: 0
//**************************************************
int WireWriteText( lua_State *LuaLinkP );

//**************************************************
// 送信するデータブロックのセット: Wire.writeA
//  Wire.writeA(array, length)
//	array: データ配列
//  length: データサイズ
//
//  戻り値
//		成功: 送信したバイト数
//		失敗: 0
//**************************************************
int WireWriteArray( lua_State *LuaLinkP );

//**************************************************
// I2Cに送信する: Wire.endT
//  Wire.endT()
//
//	戻り値:
//		0: 成功
//		1: 送信バッファ溢れ
//		2: スレーブアドレス送信時にNACKを受信
//		3: データ送信時にNACKを受信
//		4: その他のエラー
//**************************************************
int WireEndTran( lua_State *LuaLinkP );

//**************************************************
// SDA,SCLピンの割り当て任意のピンに変更する: Wire.SdaScl
//  Wire.SdaScl(sda, scl)
//  sda: データ端子ピン番号
//  scl: クロック端子ピン番号
//**************************************************
int WireAssignSdaScl( lua_State *LuaLinkP );

//**************************************************
// I2Cマスターとして初期化する: Wire.master
//  Wire.master()
//**************************************************
int WireMaster( lua_State *LuaLinkP );
